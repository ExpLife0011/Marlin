RELEASENOTES MARLIN VERSION 5.x
===============================

For releasenotes of the previous main version (4.x), see the separate file "Releasenotes_v4.txt".
This document contains all release notes and remarks beginning with version 5.0. The document
would otherwise grow to large and complex.
Version 5.x contains NO real function breaks but adds IIS capabilities for the application pool
and further maturity changes for IIS in general
----------------------------------------------------------------------------------------------

CHANGES IN VERSION 5.0.3
------------------------
1)  The framework now makes use of the "_set_se_translator" functionality to translate SEH
    exceptions to regular exceptions. This makes programming with this framework far more robust.
    BEWARE: Change all the "catch(CString& str)" functionality in your programs to the new
    "catch(StdException* er)" type of catching exceptions.

    As a second best, you can also try to catch the regular "CException" from the MFC framework!!

CHANGES IN VERSION 5.0.2
------------------------
1)  Various maintainability changes (virtual destructors), code cleanup, to shut up SonarQube
    quality analyzer.
2)  Stacktrace analyzer has lowered the access rights to IIS.

CHANGES IN VERSION 5.0.1
------------------------
1)  Aborting an event stream after 64K chunks must be done, instead of a close. This ensures that
    the client will try to reconnect in the EventSource to the server.
2)  Correction for Firefox for reading chunks in the general "ReceiveIncomingRequest" for IIS.

CHANGES IN VERSION 5.0.0
========================
1)  The MarlinModule can now support multiple applications in one IIS application pool. There is 
    not just one ServerApp (g_server is gone!) but rather a new "ServerApp" derived object in the 
    "OnApplicationStart" will be made. And likewise destroyed in "OnApplicationStop".
    In order to make use of this version of Marlin, you must program the following changes in your
    existing "ServerApp" derived application:

    a)   Create "ServerAppFactory" derived class with one member "CreateServerApp". 
         This factory now controls which ServerApp to create. Most possibly only one;
         The factory removes the need for a global 'g_server' declaration.
    b)   Change the constructor of your class to have the following three parameters
         -  A pointer to the "IHttpServer" class of IIS
         -  A CString with the application name (the name of the site in IIS)
         -  A CString with the pathname to the webroot
         You must pass these parameters on to the ServerApp in your constructor;
    c)   Change the implementation of your "ServerApp". Change the implementation of the
         "InitInstance" method to call it's main class "Serverapp::InitInstance()" 
         BEFORE anything else;
    d)   Change the implementation of your "ServerApp". Change the implementation of the
         "ExitInstance" method to call it's main class "Serverapp::ExitInstance()" 
         AFTER anything else;

    You can find examples of these in the test framework in the "MarlinServerIIS" and in the
    MarlinServerIISWC projects.
    To accomodate these changes the "MarlinModule" implementation to link the framework to IIS
    has been extensively updated.

*** End of file ***
