RELEASENOTES MARLIN VERSION 4.x
===============================

For releasenotes of the previous main version (3.x), see the separate file "Releasenotes_v3.txt".
This document contains all release notes and remarks beginning with version 4.0. The document
would otherwise grow to large and complex.
Version 4.x contains functional breaks with the past and previous version and your programms
will need checking on the logic and functionality to make version 4.x correctly working.
----------------------------------------------------------------------------------------------

CHANGES IN VERSION 4.5
======================
1) All logging is now done in 5 loglevels. These are the loglevels:
   0) No logging
   1) Errors
   2) Logging of actions
   3) Logging of actions and bodies
   4) Tracing of settings + level 3
   5) Tracing of hexdumps of messages + level 4
   Of course the higher settings (3,4,5) have serious impact on the production level performance,
   so they should be used sparingly. 
   The old members of all objects that have a SetLoggging or SetDetailLogging will translate those
   member calls to a loggin in level 2 (logging of actions).

   REVIEW YOUR PROGRAMMING LOGIC TO ADJUST THE LOGGING SETTINGS!

2) The WebSocket implementation on IIS seems to be broken. It is not used anywhere.
   The implementation on the stand-alone servers is not working at all. So this remains a feature
   that is 'in development'.
   The HTTPClient implmentation of the WebSockets is completly tested and working!

CHANGES IN VERSION 4.4
======================
1) All auhtentication checking is now done by the HTTPServer main object. This means that the
   checking is the same for the IIS, the sync server and the a-sync server.
2) The HTTPServerIIS now also checks the authentication. Just in case no IIS module has been
   configured to catch an unauthenticated call.
3) In case of a www-authenticate header in the HTTP call, the server will pass on the authentication
   to the handlers of the HTTPSite. It is the responsibility of these handlers to accept or reject
   the total HTTP call. 
   Tip: A good way to implement such a functionallity is the writing of a specialized HTTPFilter!
4) The WebServiceClient now has methods to set and get the default username/password.
   By using these, you can use basic-authentication and digest authentication on a reliable
   messaging channel. The WebServiceClient needs this info to be able to set the authentication
   for the opening 'CreateSequence' and the closing 'LastMessage' and 'TerminateSequence'
   messages.
5) Bug fix in the Analysis logfile object. The separate 'logfile.config' configuration is read
   (again) correctly.

CHANGES IN VERSION 4.3
======================
1) There are now 4 server setups. This is an overview:
   - MarlinServer      : HTTPServerMarlin a-synchronous mode webserver without IIS
   - MarlinServerSync  : HTTPServerSync old synchronous mode webserver without IIS
   - MarlinServerIIS   : HTTPServerIIS running under IIS (production mode)
   - MarlinServerIISWC : HTTPServerIIS running in Hosted WebCore as stand alone program
2) The async server is now implemented on top of overlapping asynchronous I/O with the
   IOCompletionPort mechanisms in the MS-Windows SDK. This is done for runtime scaling of
   the server.
3) The Threadpool object has been re-written to be used with the I/O completion port
   mechanisms. The HTTPThreadpool object was removed from the project.
4) The HTTPMessage and XML/SOAP Message objects now have a reference counting mechanism
   Main reason for adding these is the a-sync mode server that scales better on runtime
5) The a-sync server has a new object (HTTPRequest) that holds the status of each request
   as it progresses through all the stages (receive, reading, response, writing) of the
   HTTP call asynchroneously.
6) WebSockets still needs to be implemented on the Marlin A-Sync server!
7) Adding a non-file part to a MultiPartBuffer has been extended with two extra parameters.
   These were the parameters in previous versions:
   a) p_name         : The name of the form-data multipart buffer
   b) p_contentType  : The content type of this particular part
   c) p_data         : The string data to add to the part
   The next two parameters are new:
   d) p_charset      : Character set of data, or the charset you want the data converted to!
   e) p_conversion   : Perform the conversion (if data not already in p_charset)
   Please be advised that if p_charset is empty, "utf-8" is assumed as of IETF RFC 7578

CHANGES IN VERSION 4.2
======================
1) WebSocket's have been implemented for the client side and for the IIS server side.
   The stand-alone Marlin version is still lacking. The server will need rework to do async
   I/O throughout the server before WebSockets can work.
2) WebSocketClient can be used on a client application and exposes the OnOpen, OnClose,
   OnMessage, OnBinary and OnError message handlers. The class has been tested against
   the standard "ws[s]://echo.websocket.org" service.
3) WebSocketServerIIS can be used by any server and exposes all the standard message handlers.

CHANGES IN VERSION 4.1
======================
1) Reworked the XMLMessage object. As it is one of the core components of the Marlin framework
   the reworking on the XMLElement part of the object (making it a 'real' class) has impacat on
   all of the rest of the library. Expect a few getters and setters here and there in your code
   that will need adding / refactoring.
2) The XMLMessage can now be added to resource bound objects with a reference counter. You can
   use the two designated methods for this:
   - AddReference    -> Adding a reference to keep the object alive
   - DropReference   -> Dropping a reference means: destroy the object at the last 'drop'.
4) Added the WebSocket protocol a la IETF RFC 6455. See alsoo the original URL for this RFC at:
   https://www.rfc-editor.org/rfc/pdfrfc/rfc6455.txt.pdf
   A 'WebSocket' class with a 'Server' and 'Client' subclass have been added to the project.
   We now have two-way-communication between server and client.

PATCH VERSION 4.0.3 (20-04-2017)
--------------------------------
1) Event streams can send at maximum 64K chunks in the IIS situation. Including the keepalive
   hartbeat this can allow for several hours (up to 10 or 20 hours) or even as little as less
   then 1 hour connection, depending on how much data is sent. The stream will now gracefully
   close at about the maximum of 64K chunks, so the client can reopen a new fresh event stream.
2) Fixed a bug in the WebServiceClient when logging large error messages. These could crash 
   the client in the formatting of the logging.
3) Added documentation for the even-stream handling in IIS. IIS should be configured **NOT**
   to use dynamic content compression on event-stream content types. This can seriously impact
   the functionallity of the event stream.
4) Added a check on the hosted webcore if IIS is still running. Will not start if the IIS
   service is still active. Stop that service first!

PATCH VERSION 4.0.2 (12-04-2017)
--------------------------------
1) Correction of the closing of the evenstreams in IIS and stand-alone Marlin server
   The streams are closed and aborted and destroyed in a different order. In fact the IIS
   implementation did call some stand alone functionality here.
2) Correction in the flushing of the event streams. Streams where incorrectly flushed in IIS
   situation as a async stream, on a synchroneous request queue.
3) Correction in the reading of the last part of a MultiPartBuffer. E.q. the last JSON part
   in a multipart buffer was partly missing. The testing for the last delimiter is now relaxed.

PATCH VERSION 4.0.1 (17-03-2017)
--------------------------------
1) Correction in the reading of the HTTPServerIIS of multipart messages. The stop argument
   for reading the message to completion was broken. 
2) Correction of the HostedWebCore module. Not all HRESULT return codes where correctly
   translated to to HRESULT_CODE's. This also corrects the printing of error information
   in the hosted webcore
3) Added the flushing of the server logfile in the Hosted Web Core menu
4) Documented the inner workings of the IIS module
5) Added "XMLElement* GetXMLBodyNode()" method to SOAPMessage. This returns the current
   pointer to the xml-element of the m_body body-node.


CHANGES IN VERSION 4.0
======================
1) This version Contains the jump to seperate IIS configuration for Marlin. The Marlin server 
   has now been split in two. These two parts are:
   HTTPServerMarlin  : This is the 'stand alone' server from previous versions
   HTTPServerIIS     : This is the 'integrated' IIS module.

   Furthermore there important new entry points:
   MarlinModule      : This is the module that's called by the IIS W3SVC service first
   ServerApp         : The general app, derive your application from this object. START HERE!
   WebConfigIIS      : The reading of the IIS configuration files

   If you do not wish to use the IIS option, derive your server from "HTTServerMarlin" when
   upgrading to this version of the Marlin software.

2) Due to the different workings of IIS, if you want to run in that mode, the web.config of Marlin
   will not be read. Instead the "ApplicationHost.Config" (on C:\Windows\System32\inetsrv\config)
	 and the web.config (in C:\inetpub\wwwroot\YourSite\) will be read.

   Functionallity               Where to find
   -------------------------    --------------------------------------------
   Location of the log file     <log><centralW3CLogFile><directory>
   Logging is on or off         <log><centralW3CLogFile><enabled>
   Site's root directory        <site><VirtualDirectory><physicalPath>
   Protocol binding             <site><binding><bindingInformation>
   Protocol                     <site><binding><protocol>
   Secure site (HTTPS)          <site><binding><sslFlags>
   Streaming limit (in bytes)   <system.WebServer><requestLimits><maxAllowedContentLength>
   Basic authentication         <location><authentication><basicAuthentication><enabled>
   Basic realm                  <location><authentication><basicAuthentication><realm>
   Basic domain                 <location><authentication><basicAuthentication><defaultLogonDomain>
   Digest authentication        <location><authentication><digestAuthentication><enabled>
   Digest realm                 <location><authentication><digestAuthentication><realm>
   Windows authentication       <location><authentication><windowsAuthentication><enabled>
   NLTM caching                 <location><authentication><windowsAuthentication><authPersistSingleRequest>
   NTLM authentication          <location><authentication><windowsAuthentication><providers><NTLM>
   Negotiate authentication     <location><authentication><windowsAuthentication><providers><Negotiate>
   Kerberos authentication      <location><authentication><windowsAuthentication><providers><Negotiate:Kerberos>

   CAVEAT: Many options of the Marlin web.config are **NOT** supported in IIS mode
           To use these options, incorporate them in the config file of your product!!
           And let the product set the options on the site by use of "Set...." methods.

3) Short walk-through for setting up IIS for the Test server and client:
   a) Register the "MarlinIISModule.dll" to IIS with the "register.cmd" script in the root directory
   b) Open IIS-Admin
   c) Create a "Marlin" application pool as a Native pool (no Dot NET!)
   d) Create site "MarlinTest" with a binding of "*:80" (http)
   e) Create site "SecureTest" with a binding of "*:443" (https)
   f) Create site "SecureClientCert" with a binding of "*:1222" (https)
   g) Bind all three sites to the "Marlin" application pool.
   h) Place standard HTML documents in the sites as specified in the MarlinIISClient program
   i) Open the modules pane for your server OR for your site and activate the native "MarlinIISModule"
   j) For each site activate the windowsAuthentication and activate the "NTLM" provider
   k) For the "SecureClientCert" site, activate the "marlin.org" client certificate (see directory Certificates)
   l) Start IIS
   m) Start the Marlin application pool
   n) Start the MarlinIISClient testprogram

4) The WSDL checking of incoming SOAP services are now extended with all XSD datatypes as
   defined by the W3C standard for XML schema's "http://www.w3.org/TR/xmlschema11-2/"
   Newly understood datatypes are:

   XML Schema data type           Implementation
   ------------------------------ -----------------------------------------------------
   anyURI                         Any valid 'crackable' URL
   date                           Gregorian dates between 1-1-1 and 31-12-9999
   dateTimeStamp                  Gregorian date + time + optional timezone
   decimal                        Any decimal number (without exponent)
   long                           32 bits signed integer
   int                            32 bits signed integer
   short                          16 bits signed integer
   byte                           8  bits signed integer
   nonNegativeNumber              32 bits positive integer or 0 (zero)
   positiveNumber                 32 bits positive integer (> 0)
   unsignedLong                   32 bits unsigned integer
   unsignedInt                    32 bits unsigned integer
   unsignedShort                  16 bits unsigned integer
   unsignedByte                   8  bits unsigned integer
   nonPositiveInteger             32 bits negative integer or 0 (zero)
   negativeInteger                32 bits negative integer (< 0)
   duration                       Interval string (+/PnYnMnDTnHnMn.nS)
   dayTimeDuration                Interval string day to second
   yearMonthDuration              Interval string year to month
   float                          IEEE floating point with 7 decimals
   gDay                           Gregorian calendar day in the month (1-31)
   gMonth                         Gregorian month in the year (1-12)
   gMonthDay                      Gregorian month and day in the year
   gYear                          Gregorian year
   gYearMonth                     Gregorian year and month
   hexBinary                      Hexadecimal representation of a binary
   NOTATION                       Enumeration of XML entities
   QName                          Full qualified name with namespace (one colon!)
   normalizedString               String without red space (cr-lf-tab)
   token                          Identifier name
   language                       Language code
   name                           Name with check on first char
   NCName                         Non-colonized name
   ENTITY                         Non-colonized name, no special implementation!
   ID                             Non-colonized name, no special implementation!
   IDREF                          Non-colonized name, no special implementation!
   NMTOKEN                        Token, no special implementation!
   time                           Time string as in "HH:MM:SS"
   ENTITIES                       List of ENTITY,  seperated by one space
   IDREFS                         List of IDREF,   seperated by one space
   NMTOKENS                       List of NMTOKEN, seperated by one space
   anyType                        Any type in this list
   anySimpleType                  Any type in this list
   anyAtomicType                  Any type in this list

   The following datatypes were already supported in previous version:

   XML Schema data type           Implementation
   ------------------------------ -----------------------------------------------------
   string                         String of characters
   integer                        32 bits signed integer
   boolean                        Boole logic as in: true or false, 1 or 0
   double                         IEEE floating point with 15 decimal places
   base64Binary                   Base64 representation of binary
   dateTime                       "YYYY-MM-DDTHH:MM:SS.S" timestamp string + timezone

   NB: The name of "XDT_Base64" has been changed to "XDT_Base64Binary"
       so check your sourcecode for this change!

5)  The configuration file "logfile.config" in your program directory now also can 
    contain the configuration line "rotate=1" or "rotate=0". This triggers the rotation
    of the logfiles for a server like applicatin with the starting time in the filename,
    and the deletion of files of over 1 month old.
6)  The 'agent' string of the HTTPClient has been changed from "MarlinClient" to the
    more generic name "HTTPClient/1.0", as to not give a way the fact on the internet
    what the product's technology is.
7)  The HTTPClient's cleanup at the reset for a next call has been improved. Less clutter
    of the last call will be left for the next call. And a rare memory leak in the case
    a requested file was not sent, has been corrected. 
8)  A bug for the HTTPClient as a eventsource without a logfile has been corrected.
9)  The SiteHandlerGet has an extra set of overridable methods for the expansion 
    of the filename to get. This makes it possible to have a finer grained control
    over which files / directories to get.
10) All PostHandle methods of the SiteHandlers are more cautious before calling the
    SendResponse methods of the HTTPSite and the HTTPServer. Thus removing the extra
    calling of these methods.
11) The "Open" method of the WebServiceClient now returns a boolean (true / false) 
    whether the client was started and opened correctly. No need to call "IsOpen".
12) All datatypes are moved to a new header ("XMLDataTypes.h")
13) Correction in the interpretation of the WSDL "minOccurs" and "maxOccurs" attributes.
    For the interpretation of the 'mandatory' status, only the 'minOccurs' attribute is used now.
    0 or less means 'Optional', 1 and greater means 'manditory'.
14) Added a 'cleanup job' to the threadpool. One or more cleanup jobs can be registered that will
    be called after the threadpool has been drained and stopped. The cleanup jobs will be called
	  from the mainthread of the threadpool, in order of registration.
15) A 'Command BUS' is implemented on top of the threadpool.
    Functionallity can subscribe to a command (a string keyword) to be called when needed with
	  their own thread to handle a function. Publishing of a command will call all subscribers
	  to that command with an argument that is passed on to the handler function as a result of 
	  the threadpool calling.
	  This command bus can be used if a single situation calls for multiple handlers to be 
	  started, each with their own unique thread of processing.
	  The bus is an extension of the standard MS-Windows messaging, which in general only goes
	  to the interface thread of an application. The bus is purely meant to be used by a server
	  application, such as a webserver.
16) The following WSDL checks have been implemented
    - whiteSpace      Preserve/replace/collapse rules
	  - pattern         Regular expression matching
	  - totalDigits	  Max total digits of a number
	  - fractionDigits  Max total fractional digits of a number
	  - minInclusive    For all relevant datatypes
	  - minExclusive    For all relevant datatypes
	  - maxInclusive    For all relevant datatypes
	  - maxExclusive    For all relevant datatypes
	  In order to fullfill the min/max In/Ex-clusive rules, a new XMLTemporal class has been added.
	  this class contains a partial implementation of Date,Time,Timestamp and Durations.
	  The implementation only calculates a ordinal number to parse min/max values.

17) Hosted Web Core support for Marlin
    The hosted webcore is meant for development purposes to be able to run an IIS application 
	  outside the complete IIS infrastructure. The application can be run by pressing 'run' in Visual
  	Studio. Pre-requesites are the following
	  - Installation of "Hosted Web Core" as an OS feature (apart from IIS)
	  - Application image can be compiled as an EXE and deployed as a DLL
	  - The main wil call "HWC_main(argc,argv)" function to start the hosted webcore
	    See the "HostedWebCore" project in the solution